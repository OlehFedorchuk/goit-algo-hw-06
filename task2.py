import networkx as nx
from collections import deque

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –º–µ—Ä–µ–∂–∞ –º—ñ—Å—Ç–∞)
G = nx.Graph()
edges = [
    ('A', 'B'), ('A', 'C'), ('B', 'D'),
    ('C', 'D'), ('C', 'E'), ('D', 'F'),
    ('E', 'F')
]
G.add_edges_from(edges)

# BFS: –ü–æ—à—É–∫ —É —à–∏—Ä–∏–Ω—É
def bfs(graph, start, goal):
    visited = set()
    queue = deque([[start]])

    while queue:
        path = queue.popleft()
        node = path[-1]

        if node == goal:
            return path

        if node not in visited:
            visited.add(node)
            for neighbor in graph.neighbors(node):
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)
    return None

# DFS: –ü–æ—à—É–∫ —É –≥–ª–∏–±–∏–Ω—É
def dfs(graph, start, goal, path=None, visited=None):
    if visited is None:
        visited = set()
    if path is None:
        path = [start]

    visited.add(start)

    if start == goal:
        return path

    for neighbor in graph.neighbors(start):
        if neighbor not in visited:
            new_path = dfs(graph, neighbor, goal, path + [neighbor], visited)
            if new_path:
                return new_path
    return None

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
start, goal = 'A', 'F'
bfs_path = bfs(G, start, goal)
dfs_path = dfs(G, start, goal)

# –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("BFS —à–ª—è—Ö:", bfs_path)
print("DFS —à–ª—è—Ö:", dfs_path)

# –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ü—ñ
print("\n–ü–æ—è—Å–Ω–µ–Ω–Ω—è:")
print("üîπ BFS –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö (–Ω–∞–π–º–µ–Ω—à–µ —Ä–µ–±–µ—Ä).")
print("üîπ DFS –º–æ–∂–µ –ø—ñ—Ç–∏ '–≤–≥–ª–∏–±' —ñ –∑–Ω–∞–π—Ç–∏ –¥–æ–≤—à–∏–π —à–ª—è—Ö, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ä—è–¥–∫—É –æ–±—Ö–æ–¥—É —Å—É—Å—ñ–¥—ñ–≤.")